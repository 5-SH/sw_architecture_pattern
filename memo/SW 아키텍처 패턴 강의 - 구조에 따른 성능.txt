구조에 따른 성능
	비동기 & 논블로킹이 속도가 젤 좋음
		자바 netty 를 쓰면 성능이 엄청 좋아짐
		비동기 논블로킹(Netty) 안쓰는 이유는?
			-> 코드 짜기가 너무 어려움
			reactor 로 짜면 몇 줄이면 되는걸 proactor 는 몇 백줄로 짜야함
			모든걸 콜백으로 짜야하기 때문
		데이터 수집 부분을 Netty 나 nodejs 로 짜는게 더 좋다
		특히 네티를 쓰는건 매우 좋다
	
	DB 랑 연동하는 비즈니스로직은 스프링이 매우 좋음
		-> hikari-pool 이라는 좋은 커넥션풀 라이브러리가 있기 때문
		node.js 나 netty 는 이런게 없음
		멀티쿼리 성능 지표 -> 스프링 : 3만여 건, nodejs 12,000 여 건
			https://www.techempower.com/benchmarks/#section=data-r18&hw=ph&test=query
	=> 로그, 파일 IO 가 많다 -> netty / DB 접근이 많다 -> 스프링
	
	항상 프로액터가 리액터 보다 빠르냐?
		항상은 아니고 대부분 빠르다
		IO 가 많으면 프로액터가 유효하다
			작은 용량에서는 리액터가 더 성능이 좋다(~3kb)
			2mb 부터는 프로액터가 성능이 좋아진다
				=> 커널 쪽에서 IO 를 처리한 다음 돌려주니까 유저레벨에서 블락되지 않고
				사용자의 요청을 바로바로 처리해 주기 때문
				그런데 IO 가 적으면 커널에 IO 요청을 위임하는 과정이 오히려 더 오래 걸려서
				작은 사이즈의 IO 에서는 리액터가 성능이 좋은 것
				=> IOCP 에서는 IO 가 작으면 프로액터 말고 다른 방법을 사용하도록 처리되어 있기 때문에
				거의 무조건 성능이 더 좋음